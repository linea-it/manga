# Generated by Django 3.0.6 on 2020-09-30 21:24

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('megacube', models.CharField(help_text="The name of the megacube's file", max_length=150, unique=True, verbose_name='Megacube File Name')),
                ('plate', models.BigIntegerField(blank=True, help_text='\tPlate ID', null=True, verbose_name='Plate ID')),
                ('ifudsgn', models.CharField(blank=True, help_text='IFU Design ID (e.g. 12701)', max_length=100, null=True, verbose_name='IFU Design ID')),
                ('plateifu', models.CharField(help_text='Plate+ifudesign name for this object (e.g. 7443-12701)', max_length=100, unique=True, verbose_name='Plate IFU Design ID')),
                ('mangaid', models.CharField(help_text='MaNGA ID for this object (e.g. 1-114145)', max_length=100, unique=True, verbose_name='MaNGA ID')),
                ('versdrp2', models.CharField(blank=True, help_text='\tVersion of mangadrp used for 2d reductions', max_length=100, null=True, verbose_name='DRP 2 Version')),
                ('versdrp3', models.CharField(blank=True, help_text='Version of mangadrp used for 3d reductions', max_length=100, null=True, verbose_name='DRP 3 Version')),
                ('verscore', models.CharField(blank=True, help_text='Version of mangacore used for reductions', max_length=100, null=True, verbose_name='Mangacore Version')),
                ('versutil', models.CharField(blank=True, help_text='Version of idlutils used for reductions', max_length=100, null=True, verbose_name='Idutils Version')),
                ('versprim', models.CharField(blank=True, help_text='Version of mangapreim used for reductions', max_length=100, null=True, verbose_name='MaNGA ID')),
                ('platetyp', models.CharField(blank=True, help_text='\tPlate type (e.g. MANGA, APOGEE-2&MANGA)', max_length=100, null=True, verbose_name='MaNGA ID')),
                ('srvymode', models.CharField(blank=True, help_text='Survey mode (e.g. MANGA dither, MANGA stare, APOGEE lead)', max_length=100, null=True, verbose_name='Survey Mode')),
                ('objra', models.FloatField(blank=True, help_text='Right ascension of the science object in J2000 (degrees)', null=True, verbose_name='Object Right Ascension')),
                ('objdec', models.FloatField(blank=True, help_text='Declination of the science object in J2000 (degrees)', null=True, verbose_name='Object Declination')),
                ('ifuglon', models.FloatField(blank=True, help_text='Galactic longitude corresponding to IFURA/DEC (degrees)', null=True, verbose_name='IFU RA/DEC Galactic Longitude')),
                ('ifuglat', models.FloatField(blank=True, help_text='Galactic latitude corresponding to IFURA/DEC (degrees)', null=True, verbose_name='IFU RA/DEC Galactic Latitude')),
                ('ifura', models.FloatField(blank=True, help_text='Right ascension of this IFU in J2000 (degrees)', null=True, verbose_name='IFU Right Ascension')),
                ('ifudec', models.FloatField(blank=True, help_text='Declination of this IFU in J2000 (degrees)', null=True, verbose_name='IFU Declination')),
                ('ebvgal', models.FloatField(blank=True, help_text='E(B-V) value from SDSS dust routine for this IFUGLON, IFUGLAT', null=True, verbose_name='Galactic E(B-V)')),
                ('nexp', models.BigIntegerField(blank=True, help_text='Number of science exposures combined', null=True, verbose_name='Exposures')),
                ('exptime', models.FloatField(blank=True, help_text='Total exposure time (seconds)', null=True, verbose_name='Exposures Time')),
                ('drp3qual', models.BigIntegerField(blank=True, help_text='Quality bitmask', null=True, verbose_name='Quality Bitmask')),
                ('bluesn2', models.FloatField(blank=True, help_text='Total blue (S/N)^2 across all nexp exposures', null=True, verbose_name='Blue (S/N)²')),
                ('redsn2', models.FloatField(blank=True, help_text='Total red (S/N)^2 across all nexp exposures', null=True, verbose_name='Red (S/N)²')),
                ('harname', models.CharField(blank=True, help_text='IFU harness name', max_length=100, null=True, verbose_name='Harness Name')),
                ('frlplug', models.BigIntegerField(blank=True, help_text='Frplug hardware code', null=True, verbose_name='Frplug')),
                ('cartid', models.CharField(blank=True, help_text='Cartridge ID number', max_length=100, null=True, verbose_name='Cartridge ID')),
                ('designid', models.BigIntegerField(blank=True, help_text='Design ID number', null=True, verbose_name='Design ID')),
                ('cenra', models.FloatField(blank=True, help_text='Plate center right ascension in J2000 (degrees)', null=True, verbose_name='Plate Center Right Ascension')),
                ('cendec', models.FloatField(blank=True, help_text='Plate center declination in J2000 (degrees)', null=True, verbose_name='Plate Center Declination')),
                ('airmsmin', models.FloatField(blank=True, help_text='Minimum airmass across all exposures', null=True, verbose_name='Minimum Airmass')),
                ('airmsmed', models.FloatField(blank=True, help_text='Median airmass across all exposures', null=True, verbose_name='Median Airmass')),
                ('airmsmax', models.FloatField(blank=True, help_text='Maximum airmass across all exposures', null=True, verbose_name='Maximum Airmass')),
                ('seemin', models.FloatField(blank=True, help_text='Best guider seeing (arcsec)', null=True, verbose_name='Best Guider Seeing')),
                ('seemed', models.FloatField(blank=True, help_text='Median guider seeing (arcsec)', null=True, verbose_name='Median Guider Seeing')),
                ('seemax', models.FloatField(blank=True, help_text='Worst guider seeing (arcsec)', null=True, verbose_name='Worst Guider Seeing')),
                ('transmin', models.FloatField(blank=True, help_text='Worst transparency', null=True, verbose_name='Worst Transparency')),
                ('transmed', models.FloatField(blank=True, help_text='Median transparency', null=True, verbose_name='Median Transparency')),
                ('transmax', models.FloatField(blank=True, help_text='Best transparency', null=True, verbose_name='Best Transparency')),
                ('mjdmin', models.BigIntegerField(blank=True, help_text='Minimum MJD across all exposures', null=True, verbose_name='Minimum MJD')),
                ('mjdmed', models.BigIntegerField(blank=True, help_text='Median MJD across all exposures', null=True, verbose_name='Median MJD')),
                ('mjdmax', models.BigIntegerField(blank=True, help_text='Maximum MJD across all exposures', null=True, verbose_name='Maximum MJD')),
                ('gfwhm', models.FloatField(blank=True, help_text='Reconstructed FWHM in g-band (arcsec)', null=True, verbose_name='FWHM g')),
                ('rfwhm', models.FloatField(blank=True, help_text='Reconstructed FWHM in r-band (arcsec)', null=True, verbose_name='FWHM r')),
                ('ifwhm', models.FloatField(blank=True, help_text='Reconstructed FWHM in i-band (arcsec)', null=True, verbose_name='FWHM i')),
                ('zfwhm', models.FloatField(blank=True, help_text='Reconstructed FWHM in z-band (arcsec)', null=True, verbose_name='FWHM z')),
                ('mngtarg1', models.BigIntegerField(blank=True, help_text='Manga-target1 maskbit for galaxy target catalog', null=True, verbose_name='Manga-Target1')),
                ('mngtarg2', models.BigIntegerField(blank=True, help_text='Manga-target2 maskbit for galaxy target catalog', null=True, verbose_name='Manga-Target2')),
                ('mngtarg3', models.BigIntegerField(blank=True, help_text='Manga-target3 maskbit for galaxy target catalog', null=True, verbose_name='Manga-Target3')),
                ('catidnum', models.BigIntegerField(blank=True, help_text='Primary target input catalog (leading digits of mangaid)', null=True, verbose_name='Primary Target Input Catalog')),
                ('plttarg', models.CharField(blank=True, help_text='Plate target reference file appropriate for this target', max_length=100, null=True, verbose_name='Plate Target')),
                ('manga_tileid', models.BigIntegerField(blank=True, help_text='The ID of the tile to which this object has been allocated', null=True, verbose_name='Tile ID')),
                ('nsa_iauname', models.CharField(blank=True, help_text='IAU-style designation based on RA/Dec (NSA)', max_length=19, null=True, verbose_name='IAU-Style')),
                ('ifudesignsize', models.BigIntegerField(blank=True, help_text='The allocated IFU size (0 = "unallocated")', null=True, verbose_name='Allocated IFU Size')),
                ('ifutargetsize', models.BigIntegerField(blank=True, help_text='The ideal IFU size for this object. The intended IFU size is equal to IFUTargetSize except if IFUTargetSize > 127 when it is 127, or < 19 when it is 19', null=True, verbose_name='Ideal IFU Size')),
                ('ifudesignwrongsize', models.BigIntegerField(blank=True, help_text='The allocated IFU size if the intended IFU size was not available', null=True, verbose_name='Alternative Allocated IFU Size')),
                ('nsa_field', models.BigIntegerField(blank=True, help_text='SDSS field ID covering the target', null=True, verbose_name='Field ID')),
                ('nsa_run', models.BigIntegerField(blank=True, help_text='SDSS run ID covering the target', null=True, verbose_name='Run ID')),
                ('nsa_version', models.CharField(blank=True, help_text='Version of NSA catalogue used to select these targets', max_length=6, null=True, verbose_name='Version')),
                ('nsa_nsaid', models.BigIntegerField(blank=True, null=True, verbose_name='')),
                ('nsa_z', models.IntegerField(blank=True, help_text='Heliocentric redshift', null=True, verbose_name='Heliocentric Redshift')),
                ('nsa_zdist', models.FloatField(blank=True, help_text='Distance estimate using peculiar velocity model of Willick et al. (1997); mulitply by c/Ho for Mpc', null=True, verbose_name='z Distance')),
                ('nsa_sersic_mass', models.FloatField(blank=True, help_text='Stellar mass from K-correction fit (use with caution) for Sersic fluxes (Ωm=0.3, ΩΛ=0.7, h=1)', null=True, verbose_name='K-Correction Stellar Mass For Sersic Fluxes')),
                ('nsa_elpetro_mass', models.FloatField(blank=True, help_text='Stellar mass from K-correction fit (use with caution) for elliptical Petrosian fluxes (Ωm=0.3, ΩΛ=0.7, h=1)', null=True, verbose_name='K-Correction Stellar Mass For Elliptical Petrosian Fluxes')),
                ('nsa_elpetro_ba', models.FloatField(blank=True, help_text='Axis ratio used for elliptical apertures (for this version, same as ba90)', null=True, verbose_name='Elliptical Apertures Axis Ratio')),
                ('nsa_elpetro_phi', models.FloatField(blank=True, help_text='Position angle (east of north) used for elliptical apertures (for this version, same as ba90) (degrees)', null=True, verbose_name='Elliptical Apertures Position Angle')),
                ('nsa_petro_th50', models.FloatField(blank=True, help_text='Azimuthally averaged SDSS-style Petrosian 50% light radius (derived from r band) (arcsec)', null=True, verbose_name='Petrosian 50% Light')),
                ('nsa_sersic_ba', models.FloatField(blank=True, help_text='Axis ratio b/a from two-dimensional, single-component Sersic fit in r-band', null=True, verbose_name='Sersic B/A')),
                ('nsa_sersic_n', models.FloatField(blank=True, help_text='Sersic index from two-dimensional, single-component Sersic fit in r-band', null=True, verbose_name='Sersic Index')),
                ('nsa_sersic_phi', models.FloatField(blank=True, help_text='Angle (E of N) of major axis in two-dimensional, single-component Sersic fit in r-band (degrees)', null=True, verbose_name='Sersic Angle (E of N)')),
                ('nsa_sersic_th50', models.FloatField(blank=True, help_text='50% light radius of two-dimensional, single-component Sersic fit to r-band (arcsec)', null=True, verbose_name='Sersic 50% Light')),
            ],
        ),
    ]
